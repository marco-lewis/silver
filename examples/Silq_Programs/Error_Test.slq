def Qif_classical(const x:B){
    a := 0 :!R;
    if x{
        a = a + 1;
        print(a);
    }
    // a = 2*a;
    if x{
        phase(π);
    }
} // "Forgets" a after quantum if statement
// Also occurs when x is defined within function

def Cif(a:!N){
    if a <= 1{
        print(a);
        return a + 1;
    }
    return a;
} // Can throw an error instead of returning a

def Class_arg(x:B, t:!ℝ, q:!ℚ, z:!ℤ, n:!ℕ){
    // n = n + 1;
    // z = z div 2;
    // q = q + 0.5;
    // t = 2 * t;
    a := 2 * π * t;
    x := rotX(a, x);
    return x;
} // Classical arguments are viewed as constants in function parameters

def Assert_Err(const x:B, t:!R){
    assert(t > 0);
    // assert(x != 1);
    return x;
} // Cannot verify properties about quantum variables

def Real_arg(){
    t := 0 :!R;
    t = t + 4;

    c := 2:!R;
    c = t /(2*π); // OR c := t/(2*π)

    print(t);
    print(c);
} // Can manipulate t in the scope that it is defined and init new variables

def sim_X(x:B, t:!R){
    x := rotX(2 * π * t/5, x);
    return x;
} // Can perform operations in function call (as const)

def array[n:!N](x:uint[n], ts:!R^n){
    for i in [0..n){
        // ts[i] = ts[i] * 2 * π;
        x[i] := rotX(ts[i], x[i]);
    }
    return x;
} // Can't do it with array elements either

def main(){
    x := H(0:B);
    Qif_classical(x);
    Real_arg();
    a := Cif(0);
    a = Cif(a);
    print(a);
    measure(x);
}