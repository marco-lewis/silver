; benchmark generated from python API
(set-info :status unknown)
(declare-fun x_v0q0.i () Real)
(declare-fun x_v0q0.r () Real)
(declare-fun x_v0q1.i () Real)
(declare-fun x_v0q1.r () Real)
(declare-fun x_v0q2.i () Real)
(declare-fun x_v0q2.r () Real)
(declare-fun x_v0q3.i () Real)
(declare-fun x_v0q3.r () Real)
(declare-fun x_v1q0.i () Real)
(declare-fun x_v1q0.r () Real)
(declare-fun x_v1q1.i () Real)
(declare-fun x_v1q1.r () Real)
(declare-fun x_v1q2.i () Real)
(declare-fun x_v1q2.r () Real)
(declare-fun x_v1q3.i () Real)
(declare-fun x_v1q3.r () Real)
(declare-fun f (Int) Int)
(declare-fun x_v3q0.i () Real)
(declare-fun x_v3q0.r () Real)
(declare-fun x_v3q1.i () Real)
(declare-fun x_v3q1.r () Real)
(declare-fun x_v3q2.i () Real)
(declare-fun x_v3q2.r () Real)
(declare-fun x_v3q3.i () Real)
(declare-fun x_v3q3.r () Real)
(declare-fun x_v4q0.i () Real)
(declare-fun x_v4q0.r () Real)
(declare-fun x_v4q1.i () Real)
(declare-fun x_v4q1.r () Real)
(declare-fun x_v4q2.i () Real)
(declare-fun x_v4q2.r () Real)
(declare-fun x_v4q3.i () Real)
(declare-fun x_v4q3.r () Real)
(declare-fun Pr_x_v4_3 () Real)
(declare-fun Pr_x_v4_2 () Real)
(declare-fun Pr_x_v4_1 () Real)
(declare-fun Pr_x_v4_0 () Real)
(declare-fun Pr_x_v4_sum () Real)
(declare-fun meas_cert () Bool)
(declare-fun meas_x () Int)
(declare-fun x_v0c () Int)
(declare-fun fixed_bv_ret () Int)
(assert
 (and (= x_v0q0.r 1.0) (= 0.0 x_v0q0.i)))
(assert
 (and (= x_v0q1.r 0.0) (= 0.0 x_v0q1.i)))
(assert
 (and (= x_v0q2.r 0.0) (= 0.0 x_v0q2.i)))
(assert
 (and (= x_v0q3.r 0.0) (= 0.0 x_v0q3.i)))
(assert
 (let ((?x282 (* (/ 1.0 2.0) x_v0q3.i)))
 (let ((?x456 (* (/ 1.0 2.0) x_v0q2.i)))
 (let ((?x454 (* (/ 1.0 2.0) x_v0q1.i)))
 (let ((?x453 (* (/ 1.0 2.0) x_v0q0.i)))
 (let ((?x450 (* (/ 1.0 2.0) x_v0q3.r)))
 (let ((?x449 (* (/ 1.0 2.0) x_v0q2.r)))
 (let ((?x447 (* (/ 1.0 2.0) x_v0q1.r)))
 (let ((?x305 (* (/ 1.0 2.0) x_v0q0.r)))
 (and (= x_v1q0.r (+ ?x305 ?x447 ?x449 ?x450)) (= x_v1q0.i (+ ?x453 ?x454 ?x456 ?x282))))))))))))
(assert
 (let ((?x338 (* (- (/ 1.0 2.0)) x_v0q3.i)))
 (let ((?x456 (* (/ 1.0 2.0) x_v0q2.i)))
 (let ((?x288 (* (- (/ 1.0 2.0)) x_v0q1.i)))
 (let ((?x453 (* (/ 1.0 2.0) x_v0q0.i)))
 (let ((?x322 (* (- (/ 1.0 2.0)) x_v0q3.r)))
 (let ((?x449 (* (/ 1.0 2.0) x_v0q2.r)))
 (let ((?x445 (* (- (/ 1.0 2.0)) x_v0q1.r)))
 (let ((?x305 (* (/ 1.0 2.0) x_v0q0.r)))
 (and (= x_v1q1.r (+ ?x305 ?x445 ?x449 ?x322)) (= x_v1q1.i (+ ?x453 ?x288 ?x456 ?x338))))))))))))
(assert
 (let ((?x338 (* (- (/ 1.0 2.0)) x_v0q3.i)))
 (let ((?x339 (* (- (/ 1.0 2.0)) x_v0q2.i)))
 (let ((?x454 (* (/ 1.0 2.0) x_v0q1.i)))
 (let ((?x453 (* (/ 1.0 2.0) x_v0q0.i)))
 (let ((?x322 (* (- (/ 1.0 2.0)) x_v0q3.r)))
 (let ((?x455 (* (- (/ 1.0 2.0)) x_v0q2.r)))
 (let ((?x447 (* (/ 1.0 2.0) x_v0q1.r)))
 (let ((?x305 (* (/ 1.0 2.0) x_v0q0.r)))
 (and (= x_v1q2.r (+ ?x305 ?x447 ?x455 ?x322)) (= x_v1q2.i (+ ?x453 ?x454 ?x339 ?x338))))))))))))
(assert
 (let ((?x282 (* (/ 1.0 2.0) x_v0q3.i)))
 (let ((?x339 (* (- (/ 1.0 2.0)) x_v0q2.i)))
 (let ((?x288 (* (- (/ 1.0 2.0)) x_v0q1.i)))
 (let ((?x453 (* (/ 1.0 2.0) x_v0q0.i)))
 (let ((?x450 (* (/ 1.0 2.0) x_v0q3.r)))
 (let ((?x455 (* (- (/ 1.0 2.0)) x_v0q2.r)))
 (let ((?x445 (* (- (/ 1.0 2.0)) x_v0q1.r)))
 (let ((?x305 (* (/ 1.0 2.0) x_v0q0.r)))
 (and (= x_v1q3.r (+ ?x305 ?x445 ?x455 ?x450)) (= x_v1q3.i (+ ?x453 ?x288 ?x339 ?x282))))))))))))
(assert
 (let ((?x487 (+ 1.0 (* (- 2.0) (ite (= (f 0) 1) 1.0 0.0)))))
 (and (= x_v3q0.r (* x_v1q0.r ?x487)) (= x_v3q0.i (* x_v1q0.i ?x487)))))
(assert
 (let ((?x157 (+ 1.0 (* (- 2.0) (ite (= (f 1) 1) 1.0 0.0)))))
 (and (= x_v3q1.r (* x_v1q1.r ?x157)) (= x_v3q1.i (* x_v1q1.i ?x157)))))
(assert
 (let ((?x138 (+ 1.0 (* (- 2.0) (ite (= (f 2) 1) 1.0 0.0)))))
 (and (= x_v3q2.r (* x_v1q2.r ?x138)) (= x_v3q2.i (* x_v1q2.i ?x138)))))
(assert
 (let ((?x141 (+ 1.0 (* (- 2.0) (ite (= (f 3) 1) 1.0 0.0)))))
 (and (= x_v3q3.r (* x_v1q3.r ?x141)) (= x_v3q3.i (* x_v1q3.i ?x141)))))
(assert
 (let ((?x381 (* (/ 1.0 2.0) x_v3q3.i)))
 (let ((?x394 (* (/ 1.0 2.0) x_v3q2.i)))
 (let ((?x402 (* (/ 1.0 2.0) x_v3q1.i)))
 (let ((?x390 (* (/ 1.0 2.0) x_v3q0.i)))
 (let ((?x407 (* (/ 1.0 2.0) x_v3q3.r)))
 (let ((?x406 (* (/ 1.0 2.0) x_v3q2.r)))
 (let ((?x500 (* (/ 1.0 2.0) x_v3q1.r)))
 (let ((?x417 (* (/ 1.0 2.0) x_v3q0.r)))
 (and (= x_v4q0.r (+ ?x417 ?x500 ?x406 ?x407)) (= x_v4q0.i (+ ?x390 ?x402 ?x394 ?x381))))))))))))
(assert
 (let ((?x395 (* (- (/ 1.0 2.0)) x_v3q3.i)))
 (let ((?x394 (* (/ 1.0 2.0) x_v3q2.i)))
 (let ((?x392 (* (- (/ 1.0 2.0)) x_v3q1.i)))
 (let ((?x390 (* (/ 1.0 2.0) x_v3q0.i)))
 (let ((?x409 (* (- (/ 1.0 2.0)) x_v3q3.r)))
 (let ((?x406 (* (/ 1.0 2.0) x_v3q2.r)))
 (let ((?x399 (* (- (/ 1.0 2.0)) x_v3q1.r)))
 (let ((?x417 (* (/ 1.0 2.0) x_v3q0.r)))
 (and (= x_v4q1.r (+ ?x417 ?x399 ?x406 ?x409)) (= x_v4q1.i (+ ?x390 ?x392 ?x394 ?x395))))))))))))
(assert
 (let ((?x395 (* (- (/ 1.0 2.0)) x_v3q3.i)))
 (let ((?x362 (* (- (/ 1.0 2.0)) x_v3q2.i)))
 (let ((?x402 (* (/ 1.0 2.0) x_v3q1.i)))
 (let ((?x390 (* (/ 1.0 2.0) x_v3q0.i)))
 (let ((?x409 (* (- (/ 1.0 2.0)) x_v3q3.r)))
 (let ((?x393 (* (- (/ 1.0 2.0)) x_v3q2.r)))
 (let ((?x500 (* (/ 1.0 2.0) x_v3q1.r)))
 (let ((?x417 (* (/ 1.0 2.0) x_v3q0.r)))
 (and (= x_v4q2.r (+ ?x417 ?x500 ?x393 ?x409)) (= x_v4q2.i (+ ?x390 ?x402 ?x362 ?x395))))))))))))
(assert
 (let ((?x381 (* (/ 1.0 2.0) x_v3q3.i)))
 (let ((?x362 (* (- (/ 1.0 2.0)) x_v3q2.i)))
 (let ((?x392 (* (- (/ 1.0 2.0)) x_v3q1.i)))
 (let ((?x390 (* (/ 1.0 2.0) x_v3q0.i)))
 (let ((?x407 (* (/ 1.0 2.0) x_v3q3.r)))
 (let ((?x393 (* (- (/ 1.0 2.0)) x_v3q2.r)))
 (let ((?x399 (* (- (/ 1.0 2.0)) x_v3q1.r)))
 (let ((?x417 (* (/ 1.0 2.0) x_v3q0.r)))
 (and (= x_v4q3.r (+ ?x417 ?x399 ?x393 ?x407)) (= x_v4q3.i (+ ?x390 ?x392 ?x362 ?x381))))))))))))
(assert
 (and (and (<= Pr_x_v4_0 1.0) (>= Pr_x_v4_0 0.0)) (and (<= Pr_x_v4_1 1.0) (>= Pr_x_v4_1 0.0)) (and (<= Pr_x_v4_2 1.0) (>= Pr_x_v4_2 0.0)) (and (<= Pr_x_v4_3 1.0) (>= Pr_x_v4_3 0.0))))
(assert
 (= Pr_x_v4_sum (+ Pr_x_v4_0 Pr_x_v4_1 Pr_x_v4_2 Pr_x_v4_3)))
(assert
 (= Pr_x_v4_sum 1.0))
(assert
 (= Pr_x_v4_0 (+ (+ (^ x_v4q0.r 2.0) (^ x_v4q0.i 2.0)))))
(assert
 (= Pr_x_v4_1 (+ (+ (^ x_v4q1.r 2.0) (^ x_v4q1.i 2.0)))))
(assert
 (= Pr_x_v4_2 (+ (+ (^ x_v4q2.r 2.0) (^ x_v4q2.i 2.0)))))
(assert
 (= Pr_x_v4_3 (+ (+ (^ x_v4q3.r 2.0) (^ x_v4q3.i 2.0)))))
(assert
 (let (($x470 (= Pr_x_v4_3 1.0)))
 (let (($x427 (= Pr_x_v4_2 1.0)))
 (let (($x304 (= Pr_x_v4_1 1.0)))
 (let (($x440 (= Pr_x_v4_0 1.0)))
 (let (($x442 (or $x440 $x304 $x427 $x470)))
 (let (($x337 (= meas_cert true)))
 (and (=> $x442 $x337) (=> $x337 $x442)))))))))
(assert
 (and (=> (= Pr_x_v4_0 1.0) (= meas_x 0)) (=> (= meas_x 0) (= Pr_x_v4_0 1.0))))
(assert
 (and (=> (= Pr_x_v4_1 1.0) (= meas_x 1)) (=> (= meas_x 1) (= Pr_x_v4_1 1.0))))
(assert
 (and (=> (= Pr_x_v4_2 1.0) (= meas_x 2)) (=> (= meas_x 2) (= Pr_x_v4_2 1.0))))
(assert
 (and (=> (= Pr_x_v4_3 1.0) (= meas_x 3)) (=> (= meas_x 3) (= Pr_x_v4_3 1.0))))
(assert
 (=> (= Pr_x_v4_0 0.0) (and (distinct meas_x 0) true)))
(assert
 (=> (= Pr_x_v4_1 0.0) (and (distinct meas_x 1) true)))
(assert
 (=> (= Pr_x_v4_2 0.0) (and (distinct meas_x 2) true)))
(assert
 (=> (= Pr_x_v4_3 0.0) (and (distinct meas_x 3) true)))
(assert
 (= x_v0c meas_x))
(assert
 (= fixed_bv_ret x_v0c))
(check-sat)
