simon[cert](define f:{0, 1}^2->{0, 1}^2)->(define simon_ret:{0, 1}^2)
pre{
    define b : {0,1}^2
    define x : {0,1}^2
    define y : {0,1}^2
    # Make distinct expression using Z3 Distinct for half + 1 of the values (?)
    assert(b = 0 <-> ¬(f(0) = f(1) | f(0) = f(2) | f(0) = f(3) | f(1) = f(2) | f(1) = f(3) | f(2) = f(3) ))
    assert(b = 1 <-> (f(0) = f(1) & f(2) = f(3) & ¬f(0) = f(2)))
    assert(b = 2 <-> (f(0) = f(2) & f(1) = f(3) & ¬f(0) = f(1)))
    assert(b = 3 <-> (f(0) = f(3) & f(2) = f(1) & ¬f(0) = f(1)))
    # assert(@x. f(x) = f(x xor b))
    # assert(@x. @y. (f(x) = f(y) <-> x xor y = b))
}
post{
    assert((b.simon_ret) mod 2 = 0)
}