def groverDiffusion(cand:uint[3]) mfree: uint[3] {
	for k in [0..3) { cand[k] := H(cand[k]); }
	if cand!=0 {
		phase(π);
	};
	for k in [0..3) { cand[k] := H(cand[k]); }
	return cand;
}

def grover(f:!(const uint[3] -> lifted B)):!N{
	nIterations:=2:!N;
	cand:=0:uint[3];
	for k in [0..3) { cand[k] := H(cand[k]); }

	for k in [0..nIterations){
		b := f(cand);
		if b {
			phase(π);
		}
		forget(b = f(cand));
		cand:=groverDiffusion(cand);
	}
	return measure(cand) as !N;
}
